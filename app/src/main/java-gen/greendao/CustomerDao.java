package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER.
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CustomerName = new Property(1, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CustomerEmail = new Property(2, String.class, "customerEmail", false, "CUSTOMER_EMAIL");
        public final static Property CustomerPhone = new Property(3, String.class, "customerPhone", false, "CUSTOMER_PHONE");
        public final static Property CustomerPoint = new Property(4, Double.class, "customerPoint", false, "CUSTOMER_POINT");
    };

    private DaoSession daoSession;


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CUSTOMER_NAME' TEXT," + // 1: customerName
                "'CUSTOMER_EMAIL' TEXT," + // 2: customerEmail
                "'CUSTOMER_PHONE' TEXT," + // 3: customerPhone
                "'CUSTOMER_POINT' REAL);"); // 4: customerPoint
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(2, customerName);
        }
 
        String customerEmail = entity.getCustomerEmail();
        if (customerEmail != null) {
            stmt.bindString(3, customerEmail);
        }
 
        String customerPhone = entity.getCustomerPhone();
        if (customerPhone != null) {
            stmt.bindString(4, customerPhone);
        }
 
        Double customerPoint = entity.getCustomerPoint();
        if (customerPoint != null) {
            stmt.bindDouble(5, customerPoint);
        }
    }

    @Override
    protected void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customerName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerEmail
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerPhone
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // customerPoint
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomerName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerPoint(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
