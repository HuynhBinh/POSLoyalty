package greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import greendao.Voucher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table VOUCHER.
*/
public class VoucherDao extends AbstractDao<Voucher, Long> {

    public static final String TABLENAME = "VOUCHER";

    /**
     * Properties of entity Voucher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VoucherCode = new Property(1, String.class, "voucherCode", false, "VOUCHER_CODE");
        public final static Property VoucherAmount = new Property(2, Double.class, "voucherAmount", false, "VOUCHER_AMOUNT");
        public final static Property VoucherGeneratedTime = new Property(3, String.class, "voucherGeneratedTime", false, "VOUCHER_GENERATED_TIME");
        public final static Property IsApplied = new Property(4, Boolean.class, "isApplied", false, "IS_APPLIED");
        public final static Property IsCustomerApplied = new Property(5, Boolean.class, "isCustomerApplied", false, "IS_CUSTOMER_APPLIED");
        public final static Property AppliedTime = new Property(6, String.class, "appliedTime", false, "APPLIED_TIME");
        public final static Property AppliedOutletID = new Property(7, Long.class, "appliedOutletID", false, "APPLIED_OUTLET_ID");
        public final static Property AppliedOutletName = new Property(8, String.class, "appliedOutletName", false, "APPLIED_OUTLET_NAME");
        public final static Property AppliedCompanyID = new Property(9, Long.class, "appliedCompanyID", false, "APPLIED_COMPANY_ID");
        public final static Property AppliedCompanyName = new Property(10, String.class, "appliedCompanyName", false, "APPLIED_COMPANY_NAME");
        public final static Property AppliedUserID = new Property(11, Long.class, "appliedUserID", false, "APPLIED_USER_ID");
        public final static Property AppliedUserName = new Property(12, String.class, "appliedUserName", false, "APPLIED_USER_NAME");
        public final static Property AppliedBillCode = new Property(13, String.class, "appliedBillCode", false, "APPLIED_BILL_CODE");
        public final static Property CustomerID = new Property(14, Long.class, "customerID", false, "CUSTOMER_ID");
    };

    private Query<Voucher> customer_VoucherListQuery;

    public VoucherDao(DaoConfig config) {
        super(config);
    }
    
    public VoucherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VOUCHER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'VOUCHER_CODE' TEXT UNIQUE ," + // 1: voucherCode
                "'VOUCHER_AMOUNT' REAL," + // 2: voucherAmount
                "'VOUCHER_GENERATED_TIME' TEXT," + // 3: voucherGeneratedTime
                "'IS_APPLIED' INTEGER," + // 4: isApplied
                "'IS_CUSTOMER_APPLIED' INTEGER," + // 5: isCustomerApplied
                "'APPLIED_TIME' TEXT," + // 6: appliedTime
                "'APPLIED_OUTLET_ID' INTEGER," + // 7: appliedOutletID
                "'APPLIED_OUTLET_NAME' TEXT," + // 8: appliedOutletName
                "'APPLIED_COMPANY_ID' INTEGER," + // 9: appliedCompanyID
                "'APPLIED_COMPANY_NAME' TEXT," + // 10: appliedCompanyName
                "'APPLIED_USER_ID' INTEGER," + // 11: appliedUserID
                "'APPLIED_USER_NAME' TEXT," + // 12: appliedUserName
                "'APPLIED_BILL_CODE' TEXT," + // 13: appliedBillCode
                "'CUSTOMER_ID' INTEGER);"); // 14: customerID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VOUCHER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Voucher entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String voucherCode = entity.getVoucherCode();
        if (voucherCode != null) {
            stmt.bindString(2, voucherCode);
        }
 
        Double voucherAmount = entity.getVoucherAmount();
        if (voucherAmount != null) {
            stmt.bindDouble(3, voucherAmount);
        }
 
        String voucherGeneratedTime = entity.getVoucherGeneratedTime();
        if (voucherGeneratedTime != null) {
            stmt.bindString(4, voucherGeneratedTime);
        }
 
        Boolean isApplied = entity.getIsApplied();
        if (isApplied != null) {
            stmt.bindLong(5, isApplied ? 1l: 0l);
        }
 
        Boolean isCustomerApplied = entity.getIsCustomerApplied();
        if (isCustomerApplied != null) {
            stmt.bindLong(6, isCustomerApplied ? 1l: 0l);
        }
 
        String appliedTime = entity.getAppliedTime();
        if (appliedTime != null) {
            stmt.bindString(7, appliedTime);
        }
 
        Long appliedOutletID = entity.getAppliedOutletID();
        if (appliedOutletID != null) {
            stmt.bindLong(8, appliedOutletID);
        }
 
        String appliedOutletName = entity.getAppliedOutletName();
        if (appliedOutletName != null) {
            stmt.bindString(9, appliedOutletName);
        }
 
        Long appliedCompanyID = entity.getAppliedCompanyID();
        if (appliedCompanyID != null) {
            stmt.bindLong(10, appliedCompanyID);
        }
 
        String appliedCompanyName = entity.getAppliedCompanyName();
        if (appliedCompanyName != null) {
            stmt.bindString(11, appliedCompanyName);
        }
 
        Long appliedUserID = entity.getAppliedUserID();
        if (appliedUserID != null) {
            stmt.bindLong(12, appliedUserID);
        }
 
        String appliedUserName = entity.getAppliedUserName();
        if (appliedUserName != null) {
            stmt.bindString(13, appliedUserName);
        }
 
        String appliedBillCode = entity.getAppliedBillCode();
        if (appliedBillCode != null) {
            stmt.bindString(14, appliedBillCode);
        }
 
        Long customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindLong(15, customerID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Voucher readEntity(Cursor cursor, int offset) {
        Voucher entity = new Voucher( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // voucherCode
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // voucherAmount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // voucherGeneratedTime
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isApplied
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isCustomerApplied
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // appliedTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // appliedOutletID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // appliedOutletName
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // appliedCompanyID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // appliedCompanyName
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // appliedUserID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // appliedUserName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // appliedBillCode
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // customerID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Voucher entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVoucherCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVoucherAmount(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setVoucherGeneratedTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsApplied(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsCustomerApplied(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setAppliedTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAppliedOutletID(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setAppliedOutletName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAppliedCompanyID(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setAppliedCompanyName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAppliedUserID(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setAppliedUserName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAppliedBillCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCustomerID(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Voucher entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Voucher entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "voucherList" to-many relationship of Customer. */
    public List<Voucher> _queryCustomer_VoucherList(Long customerID) {
        synchronized (this) {
            if (customer_VoucherListQuery == null) {
                QueryBuilder<Voucher> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerID.eq(null));
                queryBuilder.orderRaw("_id DESC");
                customer_VoucherListQuery = queryBuilder.build();
            }
        }
        Query<Voucher> query = customer_VoucherListQuery.forCurrentThread();
        query.setParameter(0, customerID);
        return query.list();
    }

}
